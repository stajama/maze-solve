import unittest
from naive import *
from dijkstra import *
from astar import *

class UnitTestsForMazeSolveComponents(unittest.TestCase):
    """docstring for UnitTestsForMazeSolveComponents"""
    
    def test_naiverec(self):
        self.assertEqual(naiverec([[0, 0, 0, 0, 1],
                                   [0, 0, 0, 0, 1],
                                   [0, 0, 0, 0, 1]]), 
                                   [(0, 4), (1, 4),(2, 4)])
        
        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0],
                                   [0, 0, 1, 0, 0, 0, 0],
                                   [0, 0, 1, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 0, 1, 0, 0]]), False)
        
        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 0, 0, 0, 0],
                                   [0, 0, 1, 1, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 1, 1, 0, 0],
                                   [0, 0, 0, 0, 1, 0, 0]]),
                                   [(0, 1), (1, 1), (1, 2), (2, 2), (2, 3), 
                                    (3, 3), (4, 3), (4, 4),  (5, 4)])

        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]]), 
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), 
                                    (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), 
                                    (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), 
                                    (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), 
                                    (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), 
                                    (14, 12), (14, 13), (14, 14), (15, 14)])

        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]]),
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), 
                                    (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), 
                                    (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), 
                                    (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), 
                                    (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), 
                                    (14, 12), (14, 13), (14, 14), (15, 14)])

        self.assertEqual(naiverec([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 14), (1, 14), (2, 14), (3, 14), (4, 14), (5, 14), (6, 14),
                                    (7, 14), (8, 14), (9, 14),  (9, 13), (9, 12), (9, 11), (9, 10),
                                    (9, 9),  (9, 8), (9, 7), (8, 7), (7, 7), (6, 7), (5, 7), 
                                    (4, 7), (4, 8), (4, 9), (3, 9), (2, 9), (1, 9), (1, 8), (1, 7),
                                    (1, 6), (1, 5), (1, 4), (1, 3), (1, 2), (2, 2), (3, 2), (4, 2),
                                    (5, 2), (6, 2), (7, 2), (8, 2), (9, 2), (10, 2)])
        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1),
                                    (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (13, 2), 
                                    (13, 3), (14, 3)])
        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1),
                                    (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (13, 2), 
                                    (13, 3), (14, 3)])
        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1),
                                    (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (13, 2), 
                                    (13, 3), (14, 3)])
        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 1), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7),
                                    (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), 
                                    (1, 15), (1, 16), (1, 17), (1, 18), (2, 18), (3, 18), (3, 17),
                                    (3, 16), (3, 15), (3, 14), (3, 13), (3, 12), (3, 11), (3, 10),
                                    (3, 9), (3, 8), (3, 7), (3, 6), (3, 5), (3, 4), (3, 3), (4, 3),
                                    (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10),
                                    (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17),
                                    (5, 18), (6, 18), (7, 18), (7, 17), (7, 16), (7, 15), (7, 14),
                                    (7, 13), (7, 12), (7, 11), (7, 10), (7, 9), (7, 8), (7, 7),
                                    (7, 6), (7, 5), (7, 4), (7, 3), (8, 3), (9, 3), (9, 4), (9, 5),
                                    (9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (9, 11), (9, 12),
                                    (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (10, 18),
                                    (11, 18), (11, 17), (11, 16), (11, 15), (11, 14), (11, 13),
                                    (11, 12), (11, 11), (11, 10), (11, 9), (11, 8), (11, 7),
                                    (11, 6), (11, 5), (11, 4), (11, 3), (12, 3), (13, 3), (14, 3)])
        ''' This test ensures that the naiverec() function only fails if it reaches the
        Python recursion limit.'''
        limitTest = []
        for _ in range(500):
          limitTest.append([0, 1])
          limitTest[-1] += [0 for _ in range(498)]
        limitTest.append([0, 1])
        for _ in range(497):
          limitTest[-1].append(1)
        limitTest[-1].append(0)
        limitTest.append([0 for _ in range(500)])
        limitTest[-1][-2] = 1
        with self.assertRaises(RecursionError):
          naiverec(limitTest)


    def test_naiveimp(self):
        self.assertEqual(naiveimp([[0, 0, 0, 0, 1],
                                   [0, 0, 0, 0, 1],
                                   [0, 0, 0, 0, 1]]), 
                                   [(0, 4), (1, 4),(2, 4)])

        self.assertEqual(naiveimp([[0, 1, 0, 0, 0, 0, 0],
                                   [0, 0, 1, 0, 0, 0, 0],
                                   [0, 0, 1, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 0, 1, 0, 0]]), False)
        
        self.assertEqual(naiveimp([[0, 1, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 0, 0, 0, 0],
                                   [0, 0, 1, 1, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 1, 1, 0, 0],
                                   [0, 0, 0, 0, 1, 0, 0]]),
                                   [(0, 1), (1, 1), (1, 2), (2, 2), (2, 3), 
                                    (3, 3), (4, 3), (4, 4),  (5, 4)])

        self.assertEqual(naiveimp([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]]), 
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), 
                                    (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), 
                                    (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), 
                                    (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), 
                                    (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), 
                                    (14, 12), (14, 13), (14, 14), (15, 14)])

        self.assertEqual(naiveimp([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]]),
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), 
                                    (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), 
                                    (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), 
                                    (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), 
                                    (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), 
                                    (14, 12), (14, 13), (14, 14), (15, 14)])

        self.assertEqual(naiveimp([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 14), (1, 14), (2, 14), (3, 14), (4, 14), (5, 14), (6, 14),
                                    (7, 14), (8, 14), (9, 14),  (9, 13), (9, 12), (9, 11), (9, 10),
                                    (9, 9),  (9, 8), (9, 7), (8, 7), (7, 7), (6, 7), (5, 7), 
                                    (4, 7), (4, 8), (4, 9), (3, 9), (2, 9), (1, 9), (1, 8), (1, 7),
                                    (1, 6), (1, 5), (1, 4), (1, 3), (1, 2), (2, 2), (3, 2), (4, 2),
                                    (5, 2), (6, 2), (7, 2), (8, 2), (9, 2), (10, 2)])

        self.assertEqual(naiveimp([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1),
                                    (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (13, 2), 
                                    (13, 3), (14, 3)])

        self.assertEqual(naiveimp([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1),
                                    (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (13, 2), 
                                    (13, 3), (14, 3)])

        self.assertEqual(naiveimp([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1),
                                    (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (13, 2), 
                                    (13, 3), (14, 3)])

        self.assertEqual(naiveimp([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 1), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7),
                                    (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), 
                                    (1, 15), (1, 16), (1, 17), (1, 18), (2, 18), (3, 18), (3, 17),
                                    (3, 16), (3, 15), (3, 14), (3, 13), (3, 12), (3, 11), (3, 10),
                                    (3, 9), (3, 8), (3, 7), (3, 6), (3, 5), (3, 4), (3, 3), (4, 3),
                                    (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10),
                                    (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17),
                                    (5, 18), (6, 18), (7, 18), (7, 17), (7, 16), (7, 15), (7, 14),
                                    (7, 13), (7, 12), (7, 11), (7, 10), (7, 9), (7, 8), (7, 7),
                                    (7, 6), (7, 5), (7, 4), (7, 3), (8, 3), (9, 3), (9, 4), (9, 5),
                                    (9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (9, 11), (9, 12),
                                    (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (10, 18),
                                    (11, 18), (11, 17), (11, 16), (11, 15), (11, 14), (11, 13),
                                    (11, 12), (11, 11), (11, 10), (11, 9), (11, 8), (11, 7),
                                    (11, 6), (11, 5), (11, 4), (11, 3), (12, 3), (13, 3), (14, 3)])
        limitTest = []
        for _ in range(500):
          limitTest.append([0, 1])
          limitTest[-1] += [0 for _ in range(498)]
        limitTest.append([0, 1])
        for _ in range(497):
          limitTest[-1].append(1)
        limitTest[-1].append(0)
        limitTest.append([0 for _ in range(500)])
        limitTest[-1][-2] = 1
        self.assertEqual(naiveimp(limitTest), [(0, 1), (1, 1), (2, 1), (3, 1),
            (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1),
            (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1),
            (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1),
            (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1),
            (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1),
            (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1),
            (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1),
            (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), 
            (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1),
            (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1),
            (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1),
            (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1),
            (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1),
            (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1),
            (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1),
            (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1),
            (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1),
            (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1),
            (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1),
            (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1),
            (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1),
            (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1),
            (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1),
            (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1),
            (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1),
            (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1),
            (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1),
            (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1),
            (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1),
            (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1),
            (199, 1), (200, 1), (201, 1), (202, 1), (203, 1), (204, 1),
            (205, 1), (206, 1), (207, 1), (208, 1), (209, 1), (210, 1),
            (211, 1), (212, 1), (213, 1), (214, 1), (215, 1), (216, 1),
            (217, 1), (218, 1), (219, 1), (220, 1), (221, 1), (222, 1),
            (223, 1), (224, 1), (225, 1), (226, 1), (227, 1), (228, 1),
            (229, 1), (230, 1), (231, 1), (232, 1), (233, 1), (234, 1),
            (235, 1), (236, 1), (237, 1), (238, 1), (239, 1), (240, 1),
            (241, 1), (242, 1), (243, 1), (244, 1), (245, 1), (246, 1),
            (247, 1), (248, 1), (249, 1), (250, 1), (251, 1), (252, 1),
            (253, 1), (254, 1), (255, 1), (256, 1), (257, 1), (258, 1),
            (259, 1), (260, 1), (261, 1), (262, 1), (263, 1), (264, 1),
            (265, 1), (266, 1), (267, 1), (268, 1), (269, 1), (270, 1),
            (271, 1), (272, 1), (273, 1), (274, 1), (275, 1), (276, 1),
            (277, 1), (278, 1), (279, 1), (280, 1), (281, 1), (282, 1),
            (283, 1), (284, 1), (285, 1), (286, 1), (287, 1), (288, 1),
            (289, 1), (290, 1), (291, 1), (292, 1), (293, 1), (294, 1),
            (295, 1), (296, 1), (297, 1), (298, 1), (299, 1), (300, 1),
            (301, 1), (302, 1), (303, 1), (304, 1), (305, 1), (306, 1),
            (307, 1), (308, 1), (309, 1), (310, 1), (311, 1), (312, 1),
            (313, 1), (314, 1), (315, 1), (316, 1), (317, 1), (318, 1),
            (319, 1), (320, 1), (321, 1), (322, 1), (323, 1), (324, 1),
            (325, 1), (326, 1), (327, 1), (328, 1), (329, 1), (330, 1),
            (331, 1), (332, 1), (333, 1), (334, 1), (335, 1), (336, 1),
            (337, 1), (338, 1), (339, 1), (340, 1), (341, 1), (342, 1),
            (343, 1), (344, 1), (345, 1), (346, 1), (347, 1), (348, 1),
            (349, 1), (350, 1), (351, 1), (352, 1), (353, 1), (354, 1),
            (355, 1), (356, 1), (357, 1), (358, 1), (359, 1), (360, 1),
            (361, 1), (362, 1), (363, 1), (364, 1), (365, 1), (366, 1),
            (367, 1), (368, 1), (369, 1), (370, 1), (371, 1), (372, 1),
            (373, 1), (374, 1), (375, 1), (376, 1), (377, 1), (378, 1),
            (379, 1), (380, 1), (381, 1), (382, 1), (383, 1), (384, 1),
            (385, 1), (386, 1), (387, 1), (388, 1), (389, 1), (390, 1),
            (391, 1), (392, 1), (393, 1), (394, 1), (395, 1), (396, 1),
            (397, 1), (398, 1), (399, 1), (400, 1), (401, 1), (402, 1),
            (403, 1), (404, 1), (405, 1), (406, 1), (407, 1), (408, 1),
            (409, 1), (410, 1), (411, 1), (412, 1), (413, 1), (414, 1),
            (415, 1), (416, 1), (417, 1), (418, 1), (419, 1), (420, 1),
            (421, 1), (422, 1), (423, 1), (424, 1), (425, 1), (426, 1),
            (427, 1), (428, 1), (429, 1), (430, 1), (431, 1), (432, 1),
            (433, 1), (434, 1), (435, 1), (436, 1), (437, 1), (438, 1),
            (439, 1), (440, 1), (441, 1), (442, 1), (443, 1), (444, 1),
            (445, 1), (446, 1), (447, 1), (448, 1), (449, 1), (450, 1),
            (451, 1), (452, 1), (453, 1), (454, 1), (455, 1), (456, 1),
            (457, 1), (458, 1), (459, 1), (460, 1), (461, 1), (462, 1),
            (463, 1), (464, 1), (465, 1), (466, 1), (467, 1), (468, 1),
            (469, 1), (470, 1), (471, 1), (472, 1), (473, 1), (474, 1),
            (475, 1), (476, 1), (477, 1), (478, 1), (479, 1), (480, 1),
            (481, 1), (482, 1), (483, 1), (484, 1), (485, 1), (486, 1),
            (487, 1), (488, 1), (489, 1), (490, 1), (491, 1), (492, 1),
            (493, 1), (494, 1), (495, 1), (496, 1), (497, 1), (498, 1),
            (499, 1), (500, 1), (500, 2), (500, 3), (500, 4), (500, 5),
            (500, 6), (500, 7), (500, 8), (500, 9), (500, 10), (500, 11),
            (500, 12), (500, 13), (500, 14), (500, 15), (500, 16), (500, 17),
            (500, 18), (500, 19), (500, 20), (500, 21), (500, 22), (500, 23),
            (500, 24), (500, 25), (500, 26), (500, 27), (500, 28), (500, 29),
            (500, 30), (500, 31), (500, 32), (500, 33), (500, 34), (500, 35),
            (500, 36), (500, 37), (500, 38), (500, 39), (500, 40), (500, 41),
            (500, 42), (500, 43), (500, 44), (500, 45), (500, 46), (500, 47),
            (500, 48), (500, 49), (500, 50), (500, 51), (500, 52), (500, 53),
            (500, 54), (500, 55), (500, 56), (500, 57), (500, 58), (500, 59),
            (500, 60), (500, 61), (500, 62), (500, 63), (500, 64), (500, 65),
            (500, 66), (500, 67), (500, 68), (500, 69), (500, 70), (500, 71),
            (500, 72), (500, 73), (500, 74), (500, 75), (500, 76), (500, 77),
            (500, 78), (500, 79), (500, 80), (500, 81), (500, 82), (500, 83),
            (500, 84), (500, 85), (500, 86), (500, 87), (500, 88), (500, 89),
            (500, 90), (500, 91), (500, 92), (500, 93), (500, 94), (500, 95),
            (500, 96), (500, 97), (500, 98), (500, 99), (500, 100), (500, 101),
            (500, 102), (500, 103), (500, 104), (500, 105), (500, 106), (500, 107),
            (500, 108), (500, 109), (500, 110), (500, 111), (500, 112), (500, 113),
            (500, 114), (500, 115), (500, 116), (500, 117), (500, 118), (500, 119),
            (500, 120), (500, 121), (500, 122), (500, 123), (500, 124), (500, 125),
            (500, 126), (500, 127), (500, 128), (500, 129), (500, 130), (500, 131),
            (500, 132), (500, 133), (500, 134), (500, 135), (500, 136), (500, 137),
            (500, 138), (500, 139), (500, 140), (500, 141), (500, 142), (500, 143),
            (500, 144), (500, 145), (500, 146), (500, 147), (500, 148), (500, 149),
            (500, 150), (500, 151), (500, 152), (500, 153), (500, 154), (500, 155),
            (500, 156), (500, 157), (500, 158), (500, 159), (500, 160), (500, 161),
            (500, 162), (500, 163), (500, 164), (500, 165), (500, 166), (500, 167),
            (500, 168), (500, 169), (500, 170), (500, 171), (500, 172), (500, 173),
            (500, 174), (500, 175), (500, 176), (500, 177), (500, 178), (500, 179),
            (500, 180), (500, 181), (500, 182), (500, 183), (500, 184), (500, 185),
            (500, 186), (500, 187), (500, 188), (500, 189), (500, 190), (500, 191),
            (500, 192), (500, 193), (500, 194), (500, 195), (500, 196), (500, 197),
            (500, 198), (500, 199), (500, 200), (500, 201), (500, 202), (500, 203),
            (500, 204), (500, 205), (500, 206), (500, 207), (500, 208), (500, 209),
            (500, 210), (500, 211), (500, 212), (500, 213), (500, 214), (500, 215),
            (500, 216), (500, 217), (500, 218), (500, 219), (500, 220), (500, 221),
            (500, 222), (500, 223), (500, 224), (500, 225), (500, 226), (500, 227),
            (500, 228), (500, 229), (500, 230), (500, 231), (500, 232), (500, 233),
            (500, 234), (500, 235), (500, 236), (500, 237), (500, 238), (500, 239),
            (500, 240), (500, 241), (500, 242), (500, 243), (500, 244), (500, 245),
            (500, 246), (500, 247), (500, 248), (500, 249), (500, 250), (500, 251),
            (500, 252), (500, 253), (500, 254), (500, 255), (500, 256), (500, 257),
            (500, 258), (500, 259), (500, 260), (500, 261), (500, 262), (500, 263),
            (500, 264), (500, 265), (500, 266), (500, 267), (500, 268), (500, 269),
            (500, 270), (500, 271), (500, 272), (500, 273), (500, 274), (500, 275),
            (500, 276), (500, 277), (500, 278), (500, 279), (500, 280), (500, 281),
            (500, 282), (500, 283), (500, 284), (500, 285), (500, 286), (500, 287),
            (500, 288), (500, 289), (500, 290), (500, 291), (500, 292), (500, 293),
            (500, 294), (500, 295), (500, 296), (500, 297), (500, 298), (500, 299),
            (500, 300), (500, 301), (500, 302), (500, 303), (500, 304), (500, 305),
            (500, 306), (500, 307), (500, 308), (500, 309), (500, 310), (500, 311),
            (500, 312), (500, 313), (500, 314), (500, 315), (500, 316), (500, 317),
            (500, 318), (500, 319), (500, 320), (500, 321), (500, 322), (500, 323),
            (500, 324), (500, 325), (500, 326), (500, 327), (500, 328), (500, 329),
            (500, 330), (500, 331), (500, 332), (500, 333), (500, 334), (500, 335),
            (500, 336), (500, 337), (500, 338), (500, 339), (500, 340), (500, 341),
            (500, 342), (500, 343), (500, 344), (500, 345), (500, 346), (500, 347),
            (500, 348), (500, 349), (500, 350), (500, 351), (500, 352), (500, 353),
            (500, 354), (500, 355), (500, 356), (500, 357), (500, 358), (500, 359),
            (500, 360), (500, 361), (500, 362), (500, 363), (500, 364), (500, 365),
            (500, 366), (500, 367), (500, 368), (500, 369), (500, 370), (500, 371),
            (500, 372), (500, 373), (500, 374), (500, 375), (500, 376), (500, 377),
            (500, 378), (500, 379), (500, 380), (500, 381), (500, 382), (500, 383),
            (500, 384), (500, 385), (500, 386), (500, 387), (500, 388), (500, 389),
            (500, 390), (500, 391), (500, 392), (500, 393), (500, 394), (500, 395),
            (500, 396), (500, 397), (500, 398), (500, 399), (500, 400), (500, 401),
            (500, 402), (500, 403), (500, 404), (500, 405), (500, 406), (500, 407),
            (500, 408), (500, 409), (500, 410), (500, 411), (500, 412), (500, 413),
            (500, 414), (500, 415), (500, 416), (500, 417), (500, 418), (500, 419),
            (500, 420), (500, 421), (500, 422), (500, 423), (500, 424), (500, 425),
            (500, 426), (500, 427), (500, 428), (500, 429), (500, 430), (500, 431),
            (500, 432), (500, 433), (500, 434), (500, 435), (500, 436), (500, 437),
            (500, 438), (500, 439), (500, 440), (500, 441), (500, 442), (500, 443),
            (500, 444), (500, 445), (500, 446), (500, 447), (500, 448), (500, 449),
            (500, 450), (500, 451), (500, 452), (500, 453), (500, 454), (500, 455),
            (500, 456), (500, 457), (500, 458), (500, 459), (500, 460), (500, 461),
            (500, 462), (500, 463), (500, 464), (500, 465), (500, 466), (500, 467),
            (500, 468), (500, 469), (500, 470), (500, 471), (500, 472), (500, 473),
            (500, 474), (500, 475), (500, 476), (500, 477), (500, 478), (500, 479),
            (500, 480), (500, 481), (500, 482), (500, 483), (500, 484), (500, 485),
            (500, 486), (500, 487), (500, 488), (500, 489), (500, 490), (500, 491),
            (500, 492), (500, 493), (500, 494), (500, 495), (500, 496), (500, 497),
            (500, 498), (501, 498)])

    def test_dijkstra_and_aStar(self):
        self.assertEqual(naiverec([[0, 0, 0, 0, 1],
                                   [0, 0, 0, 0, 1],
                                   [0, 0, 0, 0, 1]]), 
                                   [(0, 4), (1, 4),(2, 4)])
        
        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0],
                                   [0, 0, 1, 0, 0, 0, 0],
                                   [0, 0, 1, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 0, 1, 0, 0]]), False)
        
        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 0, 0, 0, 0],
                                   [0, 0, 1, 1, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 0, 1, 1, 0, 0],
                                   [0, 0, 0, 0, 1, 0, 0]]),
                                   [(0, 1), (1, 1), (1, 2), (2, 2), (2, 3), 
                                    (3, 3), (4, 3), (4, 4),  (5, 4)])

        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]]), 
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), 
                                    (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), 
                                    (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), 
                                    (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), 
                                    (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), 
                                    (14, 12), (14, 13), (14, 14), (15, 14)])

        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]]),
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), 
                                    (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), 
                                    (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), 
                                    (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), 
                                    (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), 
                                    (14, 12), (14, 13), (14, 14), (15, 14)])

        self.assertEqual(naiverec([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 14), (1, 14), (2, 14), (3, 14), (4, 14), (5, 14), (6, 14),
                                    (7, 14), (8, 14), (9, 14),  (9, 13), (9, 12), (9, 11), (9, 10),
                                    (9, 9),  (9, 8), (9, 7), (8, 7), (7, 7), (6, 7), (5, 7), 
                                    (4, 7), (4, 8), (4, 9), (3, 9), (2, 9), (1, 9), (1, 8), (1, 7),
                                    (1, 6), (1, 5), (1, 4), (1, 3), (1, 2), (2, 2), (3, 2), (4, 2),
                                    (5, 2), (6, 2), (7, 2), (8, 2), (9, 2), (10, 2)])
        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1),
                                    (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (13, 2), 
                                    (13, 3), (14, 3)])
        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1),
                                    (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (13, 2), 
                                    (13, 3), (14, 3)])
        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1),
                                    (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (13, 2), 
                                    (13, 3), (14, 3)])
        self.assertEqual(naiverec([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                   [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                                   [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                                   [(0, 1), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7),
                                    (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), 
                                    (1, 15), (1, 16), (1, 17), (1, 18), (2, 18), (3, 18), (3, 17),
                                    (3, 16), (3, 15), (3, 14), (3, 13), (3, 12), (3, 11), (3, 10),
                                    (3, 9), (3, 8), (3, 7), (3, 6), (3, 5), (3, 4), (3, 3), (4, 3),
                                    (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10),
                                    (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17),
                                    (5, 18), (6, 18), (7, 18), (7, 17), (7, 16), (7, 15), (7, 14),
                                    (7, 13), (7, 12), (7, 11), (7, 10), (7, 9), (7, 8), (7, 7),
                                    (7, 6), (7, 5), (7, 4), (7, 3), (8, 3), (9, 3), (9, 4), (9, 5),
                                    (9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (9, 11), (9, 12),
                                    (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (10, 18),
                                    (11, 18), (11, 17), (11, 16), (11, 15), (11, 14), (11, 13),
                                    (11, 12), (11, 11), (11, 10), (11, 9), (11, 8), (11, 7),
                                    (11, 6), (11, 5), (11, 4), (11, 3), (12, 3), (13, 3), (14, 3)])




if __name__ == '__main__':
    unittest.main()
